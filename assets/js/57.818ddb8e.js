(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{237:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"leetcode-第-5-题：“最长回文子串”题解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-第-5-题：“最长回文子串”题解","aria-hidden":"true"}},[t._v("#")]),t._v(" LeetCode 第 5 题：“最长回文子串”题解")]),t._v(" "),a("p",[t._v("题解地址："),a("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-palindromic-substring/solution/zhong-xin-kuo-san-dong-tai-gui-hua-by-liweiwei1419/",target:"_blank",rel:"noopener noreferrer"}},[t._v("中心扩散 + 动态规划 + Manacher 算法（Python 代码）"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("说明：文本首发在力扣的题解版块，更新也会在第 1 时间在上面的网站中更新，这篇文章只是上面的文章的一个快照，您可以点击上面的链接看到其他网友对本文的评论。")]),t._v(" "),a("p",[t._v("传送门："),a("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-palindromic-substring/",target:"_blank",rel:"noopener noreferrer"}},[t._v("5. 最长回文子串"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("blockquote",[a("p",[t._v("给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。")]),t._v(" "),a("p",[t._v("示例 1：")]),t._v(" "),a("p",[t._v('输入: "babad"\n输出: "bab"\n注意: "aba" 也是一个有效答案。\n示例 2：')]),t._v(" "),a("p",[t._v('输入: "cbbd"\n输出: "bb"')])]),t._v(" "),a("h2",{attrs:{id:"中心扩散-动态规划-manacher-算法（python-代码）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中心扩散-动态规划-manacher-算法（python-代码）","aria-hidden":"true"}},[t._v("#")]),t._v(" 中心扩散 + 动态规划 + Manacher 算法（Python 代码）")]),t._v(" "),a("p",[t._v("回文串可分为奇数回文串和偶数回文串。它们的区别是：奇数回文串关于它的“中点”满足“中心对称”，偶数回文串关于它“中间的两个点”满足“中心对称”。")]),t._v(" "),a("h3",{attrs:{id:"方法一：暴力匹配-（brute-force）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法一：暴力匹配-（brute-force）","aria-hidden":"true"}},[t._v("#")]),t._v(" 方法一：暴力匹配 （Brute Force）")]),t._v(" "),a("p",[t._v("暴力解法虽然时间复杂度高，但是思路清晰、编写简单，因为编写的正确性高，"),a("strong",[t._v("完全可以使用暴力匹配算法检验我们编写的算法的正确性")]),t._v("。")]),t._v(" "),a("p",[t._v("（这里就不展示暴力匹配的写法了，实际上是我很懒。）")]),t._v(" "),a("h3",{attrs:{id:"方法二：中心扩散法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法二：中心扩散法","aria-hidden":"true"}},[t._v("#")]),t._v(" 方法二：中心扩散法")]),t._v(" "),a("p",[t._v("中心扩散法的想法很简单：遍历每一个索引，以这个索引为中心，利用“回文串”中心对称的特点，往两边扩散，看最多能扩散多远。要注意一个细节：回文串的长度可能是奇数，也可能是偶数。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic.leetcode-cn.com/1774184e1cfacbce61865edbd7343ad8c84792312d40bacb8170a2bd126b8f5c-image.png",alt:"LeetCode 第 5 题：中心扩散法"}})]),t._v(" "),a("p",[t._v("我们完全可以设计一个方法，兼容以上两种情况：")]),t._v(" "),a("p",[t._v("1、如果传入重合的索引编码，进行中心扩散，此时得到的最长回文子串的长度是奇数；")]),t._v(" "),a("p",[t._v("2、如果传入相邻的索引编码，进行中心扩散，此时得到的最长回文子串的长度是偶数。")]),t._v(" "),a("p",[t._v("具体编码细节在以下的代码的注释中体现。")]),t._v(" "),a("p",[t._v("Python 代码：")]),t._v(" "),a("div",{staticClass:"language-Python [] extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("longestPalindrome")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 至少是 1")]),t._v("\n        longest_palindrome "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n        longest_palindrome_str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            palindrome_odd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" odd_len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__center_spread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            palindrome_even"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" even_len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__center_spread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当前找到的最长回文子串")]),t._v("\n            cur_max_sub "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" palindrome_odd "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" odd_len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" even_len "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" palindrome_even\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur_max_sub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" longest_palindrome"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                longest_palindrome "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur_max_sub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                longest_palindrome_str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cur_max_sub\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" longest_palindrome_str\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__center_spread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n        left = right 的时候，此时回文中心是一条线，回文串的长度是奇数\n        right = left + 1 的时候，此时回文中心是任意一个字符，回文串的长度是偶数\n        """')]),t._v("\n        l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" left\n        r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" right\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" size "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n            r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),a("p",[t._v("Java 代码：")]),t._v(" "),a("div",{staticClass:"language-Java [] extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("longestPalindrome")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" longestPalindrome "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" longestPalindromeStr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" palindromeOdd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("centerSpread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" palindromeEven "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("centerSpread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" maxLen "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" palindromeOdd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" palindromeEven"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" palindromeOdd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" palindromeEven"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("maxLen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" longestPalindrome"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                longestPalindrome "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" maxLen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                longestPalindromeStr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" maxLen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" longestPalindromeStr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("centerSpread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            l"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            r"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里要特别小心，跳出 while 循环的时候，是第 1 个满足 s.charAt(l) != s.charAt(r) 的时候")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所以，不能取 l，不能取 r")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("复杂度分析：")])]),t._v(" "),a("ul",[a("li",[t._v("时间复杂度："),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("O")]),a("mo",[t._v("(")]),a("msup",[a("mi",[t._v("N")]),a("mrow",[a("mn",[t._v("2")])],1)],1),a("mo",[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(N^{2})")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.8141079999999999em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"1.064108em","vertical-align":"-0.25em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")]),a("span",{staticClass:"vlist"},[a("span",{staticStyle:{top:"-0.363em","margin-right":"0.05em"}},[a("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[a("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),a("span",{staticClass:"reset-textstyle scriptstyle uncramped"},[a("span",{staticClass:"mord scriptstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("2")])])])]),a("span",{staticClass:"baseline-fix"},[a("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[a("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),t._v("​")])])]),a("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v("。")]),t._v(" "),a("li",[t._v("空间复杂度："),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("O")]),a("mo",[t._v("(")]),a("mn",[t._v("1")]),a("mo",[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(1)")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mord mathrm"},[t._v("1")]),a("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v("。")])]),t._v(" "),a("h3",{attrs:{id:"方法三：动态规划（推荐）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法三：动态规划（推荐）","aria-hidden":"true"}},[t._v("#")]),t._v(" 方法三：动态规划（推荐）")]),t._v(" "),a("p",[t._v("推荐理由：暴力解法太 naive，中心扩散不普适，Manacher 就更不普适了，是专门解这个问题的方法。而用动态规划我认为是最有用的，可以帮助你举一反三的方法。")]),t._v(" "),a("p",[t._v("补充说明：Manacher 算法有兴趣的朋友们可以了解一下，有人就借助它的第一步字符串预处理思想，解决了 LeetCode 第 4 题。因此以上推荐仅代表个人观点。")]),t._v(" "),a("p",[t._v("解决这类 “最优子结构” 问题，可以考虑使用 “动态规划”：")]),t._v(" "),a("p",[t._v("1、定义 “状态”；"),a("br"),t._v("\n2、找到 “状态转移方程”。")]),t._v(" "),a("p",[a("strong",[t._v("记号说明：")]),t._v(" 下文中，使用记号 "),a("code",[t._v("s[l, r]")]),t._v(" 表示原始字符串的一个子串，"),a("code",[t._v("l")]),t._v("、"),a("code",[t._v("r")]),t._v(" 分别是区间的左右边界的索引值，"),a("strong",[t._v("使用左闭、右闭区间表示左右边界可以取到")]),t._v("。举个例子，当 "),a("code",[t._v("s = 'babad'")]),t._v(" 时，"),a("code",[t._v("s[0, 1] = 'ba'")]),t._v(" ，"),a("code",[t._v("s[2, 4] = 'bad'")]),t._v("。")]),t._v(" "),a("p",[t._v("1、定义 “状态”，这里 “状态”数组是二维数组。")]),t._v(" "),a("p",[a("code",[t._v("dp[l][r]")]),t._v(" 表示子串 "),a("code",[t._v("s[l, r]")]),t._v("（包括区间左右端点）是否构成回文串，是一个二维"),a("strong",[t._v("布尔型数组")]),t._v("。即如果子串 "),a("code",[t._v("s[l, r]")]),t._v(" 是回文串，那么 "),a("code",[t._v("dp[l][r] = true")]),t._v("。")]),t._v(" "),a("p",[t._v("2、找到 “状态转移方程”。")]),t._v(" "),a("p",[t._v("首先，我们很清楚一个事实：")]),t._v(" "),a("blockquote",[a("p",[t._v("1、当子串只包含 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("1")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("1")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("1")])])])]),t._v(" 个字符，它一定是回文子串；")]),t._v(" "),a("p",[t._v("2、当子串包含 2 个以上字符的时候：如果 "),a("code",[t._v("s[l, r]")]),t._v(" 是一个回文串，例如 "),a("code",[t._v("“abccba”")]),t._v("，那么这个回文串两边各往里面收缩一个字符（如果可以的话）的子串 "),a("code",[t._v("s[l + 1, r - 1]")]),t._v(" 也一定是回文串，即：如果 "),a("code",[t._v("dp[l][r] == true")]),t._v(" 成立，一定有 "),a("code",[t._v("dp[l + 1][r - 1] = true")]),t._v(" 成立。")])]),t._v(" "),a("p",[t._v("根据这一点，我们可以知道，给出一个子串 "),a("code",[t._v("s[l, r]")]),t._v(" ，如果 "),a("code",[t._v("s[l] != s[r]")]),t._v("，那么这个子串就一定不是回文串。如果 "),a("code",[t._v("s[l] == s[r]")]),t._v(" 成立，就接着判断 "),a("code",[t._v("s[l + 1] 与 s[r - 1]")]),t._v("，这很像中心扩散法的逆方法。")]),t._v(" "),a("p",[t._v("事实上，当 "),a("code",[t._v("s[l] == s[r]")]),t._v(" 成立的时候，"),a("code",[t._v("dp[l][r]")]),t._v(" 的值由 "),a("code",[t._v("dp[l + 1][r - l]")]),t._v(" 决定，这一点也不难思考：当左右边界字符串相等的时候，整个字符串是否是回文就完全由“原字符串去掉左右边界”的子串是否回文决定。但是这里还需要再多考虑一点点：“原字符串去掉左右边界”的子串的边界情况。")]),t._v(" "),a("blockquote",[a("p",[t._v("1、当原字符串的元素个数为 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("3")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("3")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("3")])])])]),t._v(" 个的时候，如果左右边界相等，那么去掉它们以后，只剩下 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("1")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("1")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("1")])])])]),t._v(" 个字符，它一定是回文串，故原字符串也一定是回文串；")]),t._v(" "),a("p",[t._v("2、当原字符串的元素个数为 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("2")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("2")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("2")])])])]),t._v(" 个的时候，如果左右边界相等，那么去掉它们以后，只剩下 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("0")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("0")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("0")])])])]),t._v(" 个字符，显然原字符串也一定是回文串。")])]),t._v(" "),a("p",[t._v("把上面两点归纳一下，只要 "),a("code",[t._v("s[l + 1, r - 1]")]),t._v(" 至少包含两个元素，就有必要继续做判断，否则直接根据左右边界是否相等就能得到原字符串的回文性。而“"),a("code",[t._v("s[l + 1, r - 1]")]),t._v(" 至少包含两个元素”等价于 "),a("code",[t._v("l + 1 < r - 1")]),t._v("，整理得 "),a("code",[t._v("l - r < -2")]),t._v("，或者 "),a("code",[t._v("r - l > 2")]),t._v("。")]),t._v(" "),a("p",[t._v("综上，如果一个字符串的左右边界相等，以下二者之一成立即可：\n1、去掉左右边界以后的字符串不构成区间，即“ "),a("code",[t._v("s[l + 1, r - 1]")]),t._v(" 至少包含两个元素”的反面，即 "),a("code",[t._v("l - r >= -2")]),t._v("，或者 "),a("code",[t._v("r - l <= 2")]),t._v("；\n2、去掉左右边界以后的字符串是回文串，具体说，它的回文性决定了原字符串的回文性。")]),t._v(" "),a("p",[t._v("于是整理成“状态转移方程”：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("dp[l, r] = (s[l] == s[r] and (l - r >= -2 or dp[l + 1, r - 1]))\n")])])]),a("p",[t._v("或者")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("dp[l, r] = (s[l] == s[r] and (r - l <= 2 or dp[l + 1, r - 1]))\n")])])]),a("p",[a("strong",[t._v("编码实现细节")]),t._v("：因为要构成子串 "),a("code",[t._v("l")]),t._v(" 一定小于等于 "),a("code",[t._v("r")]),t._v(" ，我们只关心 “状态”数组“上三角”的那部分取值。理解上面的“状态转移方程”中的  "),a("code",[t._v("(r - l <= 2 or dp[l + 1, r - 1])")]),t._v(" 这部分是关键，因为 "),a("code",[t._v("or")]),t._v(" 是短路运算，因此，"),a("strong",[t._v("如果收缩以后不构成区间，那么就没有必要看继续 "),a("code",[t._v("dp[l + 1, r - 1]")]),t._v(" 的取值")]),t._v("。")]),t._v(" "),a("p",[t._v("读者可以思考一下：为什么在动态规划的算法中，不用考虑回文串长度的奇偶性呢。想一想，答案就在状态转移方程里面。")]),t._v(" "),a("p",[t._v("具体编码细节在代码的注释中已经体现。")]),t._v(" "),a("p",[a("strong",[t._v("参考代码")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-Python [] extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("longestPalindrome")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" s\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 二维 dp 问题")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 状态：dp[l,r]: s[l:r] 包括 l，r ，表示的字符串是不是回文串")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置为 None 是为了方便调试，看清楚代码执行流程")]),t._v("\n        dp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n        longest_l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n        res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 因为只有 1 个字符的情况在最开始做了判断")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 左边界一定要比右边界小，因此右边界从 1 开始")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" l "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 状态转移方程：如果头尾字符相等并且中间也是回文")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在头尾字符相等的前提下，如果收缩以后不构成区间（最多只有 1 个元素），直接返回 True 即可")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 否则要继续看收缩以后的区间的回文性")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重点理解 or 的短路性质在这里的作用")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" dp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    dp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n                    cur_len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" cur_len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" longest_l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                        longest_l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cur_len\n                        res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 调试语句")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# for item in dp:")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     print(item)")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print('---')")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res\n")])])]),a("p",[t._v("Java 代码：")]),t._v(" "),a("div",{staticClass:"language-Java [] extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("longestPalindrome")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" longestPalindrome "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" longestPalindromeStr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" dp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// abcdedcba")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   l   r")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 dp[l, r] = true 那么 dp[l + 1, r - 1] 也一定为 true")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 关键在这里：[l + 1, r - 1] 一定至少有 2 个元素才有判断的必要")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为如果 [l + 1, r - 1] 只有一个元素，不用判断，一定是回文串")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 [l + 1, r - 1] 表示的区间为空，不用判断，也一定是回文串")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [l + 1, r - 1] 一定至少有 2 个元素 等价于 l + 1 < r - 1，即 r - l >  2")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 写代码的时候这样写：如果 [l + 1, r - 1]  的元素小于等于 1 个，即 r - l <=  2 ，就不用做判断了")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为只有 1 个字符的情况在最开始做了判断")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 左边界一定要比右边界小，因此右边界从 1 开始")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" l"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 区间应该慢慢放大")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 状态转移方程：如果头尾字符相等并且中间也是回文")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在头尾字符相等的前提下，如果收缩以后不构成区间（最多只有 1 个元素），直接返回 True 即可")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 否则要继续看收缩以后的区间的回文性")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重点理解 or 的短路性质在这里的作用")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" dp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    dp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" longestPalindrome"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                        longestPalindrome "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                        longestPalindromeStr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" longestPalindromeStr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("写完代码以后，请读者在纸上写下代码运行的流程，以字符串 "),a("code",[t._v("'babad'")]),t._v(" 为例：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic.leetcode-cn.com/b95575c883a4fc025e4e8816d4db1f35579d5bd945bfd9128154f882406bfce7-image.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("（草稿太潦草了，大家将就看吧，懒得绘图了，原因是太麻烦，并且我觉得展示手写草稿可能更有意义一些。）")]),t._v(" "),a("p",[t._v("说明：上面示例代码填写 "),a("code",[t._v("dp")]),t._v(" 数组（二维状态数组）是按照“从左到右、从上到下”的方向依次填写的（你不妨打开我上面的 Python 示例代码中的调试语句运行一下验证），当 “ "),a("code",[t._v("s[l + 1, r - 1]")]),t._v(" 至少包含两个元素” 即 "),a("code",[t._v("r - l > 2")]),t._v(" 时，"),a("code",[t._v("dp[l, r]")]),t._v(" 的值要看 "),a("code",[t._v("d[[l + 1, r - 1]")]),t._v(" ，即在  "),a("code",[t._v("r - l > 2")]),t._v(" 的时候，"),a("code",[t._v("dp[l, r]")]),t._v(" 的值看“左下角”的值，只要按照“从左到右、从上到下”的方向依次填写，当 "),a("code",[t._v("r - l > 2")]),t._v(" 时，"),a("strong",[t._v("左下角就一定有值，这一点是动态规划算法得以有效的重要原因")]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[t._v("根据一个具体例子，在草稿纸上写下（绘图）代码的运行流程，有时是够加深我们对算法的理解，并且也有助于调试代码。")])]),t._v(" "),a("p",[a("strong",[t._v("复杂度分析：")])]),t._v(" "),a("ul",[a("li",[t._v("时间复杂度："),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("O")]),a("mo",[t._v("(")]),a("msup",[a("mi",[t._v("N")]),a("mrow",[a("mn",[t._v("2")])],1)],1),a("mo",[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(N^{2})")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.8141079999999999em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"1.064108em","vertical-align":"-0.25em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")]),a("span",{staticClass:"vlist"},[a("span",{staticStyle:{top:"-0.363em","margin-right":"0.05em"}},[a("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[a("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),a("span",{staticClass:"reset-textstyle scriptstyle uncramped"},[a("span",{staticClass:"mord scriptstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("2")])])])]),a("span",{staticClass:"baseline-fix"},[a("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[a("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),t._v("​")])])]),a("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v("。")]),t._v(" "),a("li",[t._v("空间复杂度："),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("O")]),a("mo",[t._v("(")]),a("msup",[a("mi",[t._v("N")]),a("mrow",[a("mn",[t._v("2")])],1)],1),a("mo",[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(N^{2})")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.8141079999999999em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"1.064108em","vertical-align":"-0.25em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")]),a("span",{staticClass:"vlist"},[a("span",{staticStyle:{top:"-0.363em","margin-right":"0.05em"}},[a("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[a("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),a("span",{staticClass:"reset-textstyle scriptstyle uncramped"},[a("span",{staticClass:"mord scriptstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("2")])])])]),a("span",{staticClass:"baseline-fix"},[a("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[a("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),t._v("​")])])]),a("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v("，二维 dp 问题，一个状态得用二维有序数对表示，因此空间复杂度是 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("O")]),a("mo",[t._v("(")]),a("msup",[a("mi",[t._v("N")]),a("mrow",[a("mn",[t._v("2")])],1)],1),a("mo",[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(N^{2})")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.8141079999999999em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"1.064108em","vertical-align":"-0.25em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")]),a("span",{staticClass:"vlist"},[a("span",{staticStyle:{top:"-0.363em","margin-right":"0.05em"}},[a("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[a("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),a("span",{staticClass:"reset-textstyle scriptstyle uncramped"},[a("span",{staticClass:"mord scriptstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("2")])])])]),a("span",{staticClass:"baseline-fix"},[a("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[a("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),t._v("​")])])]),a("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v("。")])]),t._v(" "),a("h3",{attrs:{id:"方法四：manacher-算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法四：manacher-算法","aria-hidden":"true"}},[t._v("#")]),t._v(" 方法四：Manacher 算法")]),t._v(" "),a("p",[t._v("维基百科中对于 Manacher 算法是这样描述的：")]),t._v(" "),a("blockquote",[a("p",[t._v("[Manacher(1975)] 发现了一种线性时间算法，可以在列出给定字符串中从字符串头部开始的所有回文。并且，Apostolico, Breslauer & Galil (1995) 发现，同样的算法也可以在任意位置查找全部最大回文子串，并且时间复杂度是线性的。因此，他们提供了一种时间复杂度为线性的最长回文子串解法。替代性的线性时间解决 Jeuring (1994), Gusfield (1997)提供的，基于后缀树(suffix trees)。也存在已知的高效并行算法。")])]),t._v(" "),a("p",[t._v("Manacher 算法，被中国程序员戏称为“马拉车”算法。专门用于解决“最长回文子串”问题，时间复杂度为 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("O")]),a("mo",[t._v("(")]),a("mi",[t._v("n")]),a("mo",[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(n)")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mord mathit"},[t._v("n")]),a("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v("，事实上，“马拉车”算法在思想上和“KMP”字符串匹配算法有相似之处，都避免做了很多重复的工作。“KMP”算法也有一个很有意思的戏称，带有一点颜色。")]),t._v(" "),a("p",[t._v("挺有意思的一件事情是：我在学习“树状数组”和“Manacher 算法”的时候，都看了很多资料，但最后代码实现的时候，就只有短短十几行。")]),t._v(" "),a("p",[t._v("理解 Manacher 算法最好的办法，是根据查阅的关于 Manacher 算法的文章，自己在稿纸上写写画画，举一些具体的例子，这样 Manacher 算法就不难搞懂了。")]),t._v(" "),a("p",[t._v("Manacher 算法本质上还是中心扩散法，只不过它使用了类似 KMP 算法的技巧，充分挖掘了已经进行回文判定的子串的特点，提高算法的效率。")]),t._v(" "),a("p",[t._v("下面介绍 Manacher 算法的运行流程。")]),t._v(" "),a("p",[t._v("首先还是“中心扩散法”的思想：回文串可分为奇数回文串和偶数回文串，它们的区别是：奇数回文串关于它的“中点”满足“中心对称”，偶数回文串关于它“中间的两个点”满足“中心对称”。为了避免对于回文串字符个数为奇数还是偶数的套路。首先对原始字符串进行预处理，方法也很简单：添加分隔符。")]),t._v(" "),a("h4",{attrs:{id:"第-1-步：对原始字符串进行预处理（添加分隔符）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-1-步：对原始字符串进行预处理（添加分隔符）","aria-hidden":"true"}},[t._v("#")]),t._v(" 第 1 步：对原始字符串进行预处理（添加分隔符）")]),t._v(" "),a("p",[t._v("我们先给出具体的例子，看看如何添加分隔符。")]),t._v(" "),a("p",[t._v("例1：给字符串 "),a("code",[t._v('"level"')]),t._v(" 添加分隔符 "),a("code",[t._v('"#"')]),t._v("。")]),t._v(" "),a("p",[t._v("答：字符串 "),a("code",[t._v('"level"')]),t._v(" 添加分隔符 "),a("code",[t._v('"#"')]),t._v(" 以后得到："),a("code",[t._v('"#le#v#e#l#"')]),t._v("。")]),t._v(" "),a("p",[t._v("例2：给字符串 "),a("code",[t._v('"noon"')]),t._v(" 添加分隔符 "),a("code",[t._v('"#"')]),t._v("。")]),t._v(" "),a("p",[t._v("答：字符串 "),a("code",[t._v('"noon"')]),t._v(" 添加分隔符 "),a("code",[t._v('"#"')]),t._v(" 以后得到："),a("code",[t._v('"#n#o#o#n#"')]),t._v("。")]),t._v(" "),a("p",[t._v("我想你已经看出来分隔符是如何添加的，下面是两点说明。")]),t._v(" "),a("p",[t._v("1、分隔符是一定是原始字符串中没有出现过的字符，这个分隔符的种类也只能有一个，即你不能同时添加 "),a("code",[t._v('"#"')]),t._v(" 和 "),a("code",[t._v('"?"')]),t._v(" 作为分隔符；")]),t._v(" "),a("p",[t._v("2、添加分隔符的方法是在字符串的首位置、尾位置和每个字符的“中间”都添加 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("1")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("1")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("1")])])])]),t._v(" 个这个分隔符。可以很容易知道，如果这个字符串的长度是 "),a("code",[t._v("len")]),t._v("，那么添加的分隔符的个数就是 "),a("code",[t._v("len + 1")]),t._v("，得到的新的字符串的长度就是 "),a("code",[t._v("2 * len + 1")]),t._v("，"),a("strong",[t._v("显然它一定是奇数")]),t._v("。")]),t._v(" "),a("p",[t._v("为什么要添加分隔符？")]),t._v(" "),a("p",[t._v("1、首先是正确性：添加了分隔符以后的字符串的回文性质与原始字符串是一样的（这句话不是很严谨，大家意会即可）；")]),t._v(" "),a("p",[t._v("2、其次是避免回文串长度奇偶性的讨论（马上我们就会看到这一点是如何体现的）。")]),t._v(" "),a("h4",{attrs:{id:"第-2-步：得到-p-数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-2-步：得到-p-数组","aria-hidden":"true"}},[t._v("#")]),t._v(" 第 2 步：得到 p 数组")]),t._v(" "),a("p",[t._v("p 数组可以通过填表得到。以字符串 "),a("code",[t._v('"abbabb"')]),t._v(" 为例，说明如何手动计算得到 p 数组。假设我们要填的就是下面这张表。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("char")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("a")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("a")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("index")])]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("5")]),t._v(" "),a("td",[t._v("6")]),t._v(" "),a("td",[t._v("7")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("9")]),t._v(" "),a("td",[t._v("10")]),t._v(" "),a("td",[t._v("11")]),t._v(" "),a("td",[t._v("12")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("p")])]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("p-1")])]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")])])]),t._v(" "),a("p",[t._v("第 1 行 char 数组：这个数组是原始字符串"),a("strong",[t._v("加上分隔符以后")]),t._v("的字符构成的数组。")]),t._v(" "),a("p",[t._v("第 2 行 index 数组：这个数组是char 数组的索引数组，我们后面要利用到它，它的值就是索引编号，从 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("0")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("0")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("0")])])])]),t._v(" 开始。")]),t._v(" "),a("p",[t._v("下面我们来看看 p 数组应该如何填写。首先我们定义**“回文半径”**。")]),t._v(" "),a("p",[a("strong",[t._v("回文半径")]),t._v("：以 "),a("code",[t._v("char[i]")]),t._v(" 作为回文中心，同时向左边、向右边进行“中心扩散”，直到“不能构成回文串”或“触碰到字符串边界”为止，"),a("strong",[t._v("能扩散的步数")]),t._v(" "),a("strong",[t._v("+ 1（这个 1 表示“中心”）")]),t._v(" ，即定义为 p 数组的值，也称之为“回文半径。")]),t._v(" "),a("ul",[a("li",[t._v("用上面的例子，我们首先填 "),a("code",[t._v("p[0]")]),t._v("。")])]),t._v(" "),a("p",[t._v("以 "),a("code",[t._v("char[0] = '#'")]),t._v("为中心，同时向左边向右扩散，走 1 步就碰到边界了，因此“能扩散的步数”为0，“能扩散的步数 + 1 = 1”，因此 "),a("code",[t._v("p[0] = 1")]),t._v("；")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("char")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("a")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("a")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("index")])]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("5")]),t._v(" "),a("td",[t._v("6")]),t._v(" "),a("td",[t._v("7")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("9")]),t._v(" "),a("td",[t._v("10")]),t._v(" "),a("td",[t._v("11")]),t._v(" "),a("td",[t._v("12")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("p")])]),t._v(" "),a("td",[a("strong",[t._v("1")])]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("p-1")])]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")])])]),t._v(" "),a("ul",[a("li",[t._v("下面填写 "),a("code",[t._v("p[1]")]),t._v(" 。")])]),t._v(" "),a("p",[t._v("以 "),a("code",[t._v("char[1] = 'a'")]),t._v(" 为中心，同时向左边向右扩散，走 1 步，左右都是 "),a("code",[t._v('"#"')]),t._v("，构成回文子串，于是再继续同时向左边向右边扩散，左边就碰到边界了，因此“能扩散的步数”为1，“能扩散的步数 + 1 = 2”，因此 "),a("code",[t._v("p[1] = 2")]),t._v("；")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("char")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("a")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("a")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("index")])]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("5")]),t._v(" "),a("td",[t._v("6")]),t._v(" "),a("td",[t._v("7")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("9")]),t._v(" "),a("td",[t._v("10")]),t._v(" "),a("td",[t._v("11")]),t._v(" "),a("td",[t._v("12")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("p")])]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[a("strong",[t._v("2")])]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("p-1")])]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")])])]),t._v(" "),a("ul",[a("li",[t._v("下面填写 "),a("code",[t._v("p[2]")]),t._v(" 。")])]),t._v(" "),a("p",[t._v("以 "),a("code",[t._v("char[2] = '#'")]),t._v(" 为中心，同时向左边向右扩散，走 1 步，左边是 "),a("code",[t._v('"a"')]),t._v("，右边是 "),a("code",[t._v('"b"')]),t._v("，不匹配，因此“能扩散的步数”为 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("0")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("0")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("0")])])])]),t._v("，“能扩散的步数 + 1 = 1”，因此 "),a("code",[t._v("p[2] = 1")]),t._v("；")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("char")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("a")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("a")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("index")])]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("5")]),t._v(" "),a("td",[t._v("6")]),t._v(" "),a("td",[t._v("7")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("9")]),t._v(" "),a("td",[t._v("10")]),t._v(" "),a("td",[t._v("11")]),t._v(" "),a("td",[t._v("12")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("p")])]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[a("strong",[t._v("1")])]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("p-1")])]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")])])]),t._v(" "),a("ul",[a("li",[t._v("下面填写 "),a("code",[t._v("p[3]")]),t._v("。")])]),t._v(" "),a("p",[t._v("以 "),a("code",[t._v("char[3] = 'b'")]),t._v(" 为中心，同时向左边向右扩散，走 1 步，左右两边都是 "),a("code",[t._v("“#”")]),t._v("，构成回文子串，继续同时向左边向右扩散，左边是 "),a("code",[t._v('"a"')]),t._v("，右边是 "),a("code",[t._v('"b"')]),t._v("，不匹配，因此“能扩散的步数”为 1 ，“能扩散的步数 + 1 = 2”，因此 "),a("code",[t._v("p[3] = 2")]),t._v("；")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("char")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("a")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("a")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("index")])]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("5")]),t._v(" "),a("td",[t._v("6")]),t._v(" "),a("td",[t._v("7")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("9")]),t._v(" "),a("td",[t._v("10")]),t._v(" "),a("td",[t._v("11")]),t._v(" "),a("td",[t._v("12")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("p")])]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[a("strong",[t._v("2")])]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("p-1")])]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")])])]),t._v(" "),a("ul",[a("li",[t._v("下面填写 "),a("code",[t._v("p[4]")]),t._v("。")])]),t._v(" "),a("p",[t._v("以 "),a("code",[t._v("char[4] = '#'")]),t._v(" 为中心，同时向左边向右扩散，最多可以走 4 步，左边到达边界，因此“能扩散的步数”为4，“能扩散的步数 + 1 = 5”，因此 "),a("code",[t._v("p[4] = 5")]),t._v("。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("char")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("a")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("a")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("index")])]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("5")]),t._v(" "),a("td",[t._v("6")]),t._v(" "),a("td",[t._v("7")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("9")]),t._v(" "),a("td",[t._v("10")]),t._v(" "),a("td",[t._v("11")]),t._v(" "),a("td",[t._v("12")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("p")])]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[a("strong",[t._v("5")])]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("p-1")])]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")])])]),t._v(" "),a("ul",[a("li",[t._v("继续填完 p 数组剩下的部分。")])]),t._v(" "),a("p",[t._v("分析到这里，后面的数字不难填出，最后写成如下表格：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("char")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("a")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("a")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("index")])]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("5")]),t._v(" "),a("td",[t._v("6")]),t._v(" "),a("td",[t._v("7")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("9")]),t._v(" "),a("td",[t._v("10")]),t._v(" "),a("td",[t._v("11")]),t._v(" "),a("td",[t._v("12")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("p")])]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("5")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("6")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("p-1")])]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")])])]),t._v(" "),a("p",[t._v("p-1 数组很简单了，把 p 数组对应位置的值 -1 就行了。是不是觉得有点“绕”，刚才每一步要 + 1 ，现在每一步要 -1，这不是吃饱了撑的吗？你说的没错。这里得到 p 数组不过就是为了给“回文半径”一个定义而已。")]),t._v(" "),a("p",[t._v("即：p 数组可以称之为“回文半径数组”。")]),t._v(" "),a("p",[t._v("于是我们得到如下表格：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("char")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("a")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("a")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])]),t._v(" "),a("th",[a("strong",[t._v("b")])]),t._v(" "),a("th",[a("strong",[t._v("#")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("index")])]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("5")]),t._v(" "),a("td",[t._v("6")]),t._v(" "),a("td",[t._v("7")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("9")]),t._v(" "),a("td",[t._v("10")]),t._v(" "),a("td",[t._v("11")]),t._v(" "),a("td",[t._v("12")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("p")])]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("5")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("6")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("p-1")])]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("5")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("0")])])])]),t._v(" "),a("ul",[a("li",[t._v("p 数组的最大值是 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("6")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("6")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("6")])])])]),t._v(" ，对应的 “最长回文子串” 是 "),a("code",[t._v('"#b#b#a#b#b#"')]),t._v("；")]),t._v(" "),a("li",[t._v("p - 1 数组的最大值是 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("5")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("5")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("5")])])])]),t._v("，就对应了原字符串 "),a("code",[t._v('"abbabb"')]),t._v(" 的  “最长回文子串” ："),a("code",[t._v('"bbabb"')]),t._v("。")])]),t._v(" "),a("p",[t._v("规律如下：")]),t._v(" "),a("blockquote",[a("p",[t._v("p -1 数组的最大值就是“最长回文子串”的长度。即“最大回文半径”知道了，减 1 就是原字符串的“最长回文子串”的长度。")])]),t._v(" "),a("ul",[a("li",[t._v("可以在得到 p 数组的过程中记录这个最大值，并且记录最长回文子串。")])]),t._v(" "),a("p",[t._v("那么如何编写程序得到 p 数组呢？其实也不难，即"),a("strong",[t._v("使用“回文串”的性质避免重复计算")]),t._v("。下面这张图展示了这个思想：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic.leetcode-cn.com/8bb45028184fd0e9286e667129e3ff2bd610dc46a0d3d0d1e6466d457cc63912-image.png",alt:"image.png"}}),t._v('{:width="500"}\n{:align=center}')]),t._v(" "),a("p",[t._v("上面这张图画得仔细一点是下面这张图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic.leetcode-cn.com/c20bc530f81355d92fab674cdbc0c1aeb1fa3ee2f453e078c339fe5dc1ed20d3-image.png",alt:"image.png"}}),t._v('{:width="700"}\n{:align=center}')]),t._v(" "),a("p",[t._v("这里  "),a("code",[t._v("i")]),t._v(" 和 "),a("code",[t._v("j")]),t._v(" 关于  "),a("code",[t._v("id")]),t._v(" 中心对称：即 "),a("code",[t._v("j = 2 * id - i")]),t._v("。上面的两张图表示的意思是："),a("code",[t._v("p[i]")]),t._v(" 的值可以根据 "),a("code",[t._v("p[j]")]),t._v(" 得到。因为我们遍历一个字符串的方向是“从左到右”，故数组 p 后面的值根据前面的值得来，这个思路没有问题。")]),t._v(" "),a("p",[t._v("接下来要介绍 "),a("code",[t._v("id")]),t._v(" 和 "),a("code",[t._v("mx")]),t._v(" 的含义了：")]),t._v(" "),a("p",[t._v("1、"),a("code",[t._v("id")]),t._v(" ：从开始到现在使用“中心扩散法”能得到的“最长回文子串”的中心的位置；")]),t._v(" "),a("p",[t._v("2、"),a("code",[t._v("mx")]),t._v("：从开始到现在使用“中心扩散法”能得到的“最长回文子串”能延伸到的最右端的位置。容易知道 "),a("code",[t._v("mx = id + p[id]")]),t._v("。")]),t._v(" "),a("p",[t._v("先从最简单的情况开始：")]),t._v(" "),a("p",[t._v("1、当 "),a("code",[t._v("id < i < mx")]),t._v(" 的时候，此时 "),a("code",[t._v("id")]),t._v(" 之前的 "),a("code",[t._v("p")]),t._v(" 值都已经计算出来了，我们利用已经计算出来的 "),a("code",[t._v("p")]),t._v(" 值来计算当前位置的 "),a("code",[t._v("p")]),t._v(" 值。")]),t._v(" "),a("p",[t._v("由于以 "),a("code",[t._v("j")]),t._v(" 为中心的最长子回文串，落在了以 "),a("code",[t._v("id")]),t._v(" 为中心的最长子回文串内，由于 "),a("code",[t._v("i")]),t._v("  和 "),a("code",[t._v("j")]),t._v(" 对称， 故索引 "),a("code",[t._v("i")]),t._v(" 附近的回文串可以与索引 "),a("code",[t._v("j")]),t._v(" 附近的回文串建立一一对应的关系。")]),t._v(" "),a("ul",[a("li",[t._v("如果 "),a("code",[t._v("j")]),t._v(" 的回文串很短，在 "),a("code",[t._v("mx")]),t._v(" 关于 "),a("code",[t._v("id")]),t._v(" 的对称点之前结束，一定有 "),a("code",[t._v("dp[i]=dp[j]")]),t._v("，如上图所示；")]),t._v(" "),a("li",[t._v("如果 "),a("code",[t._v("j")]),t._v(" 的回文串很长，此时 "),a("code",[t._v("dp[i]")]),t._v(" 的值不会超过 "),a("code",[t._v("i")]),t._v(" 与  "),a("code",[t._v("mx")]),t._v(" 之间的距离： "),a("code",[t._v("mx - i")]),t._v("，此时想一下 "),a("code",[t._v("mx")]),t._v(" 是 以 "),a("code",[t._v("id")]),t._v(" 为中心的最长回文子串的“最右边界”，就不难理解了，如下图所示 。")])]),t._v(" "),a("p",[t._v("如果 "),a("code",[t._v("p[j]")]),t._v(" 很大的话，即当 "),a("code",[t._v("p[j] >= mx - i")]),t._v(" 的时候，以 "),a("code",[t._v("s[j]")]),t._v(" 为中心的回文子串不一定完全包含于以  "),a("code",[t._v("s[id]")]),t._v(" 为中心的回文子串中，但是基于对称性可知，以 "),a("code",[t._v("s[i]")]),t._v(" 为中心的回文子串，其向右至少会扩张到 "),a("code",[t._v("mx")]),t._v(" 的位置，也就是说 "),a("code",[t._v("p[i] >= mx - i")]),t._v("。至于 "),a("code",[t._v("mx")]),t._v(" 之后的部分是否对称，就只能老老实实去匹配了。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic.leetcode-cn.com/81320a9c88191b52b0c3ee15d84b881baf6ab0a4319da2049f143aad380f6f0c-image.png",alt:"image.png"}}),t._v('{:width="700"}\n{:align=center}')]),t._v(" "),a("p",[t._v("把上面说的整理一下，当 "),a("code",[t._v("p[j]")]),t._v(" 的范围很小的时候，有 "),a("code",[t._v("p[i] = p[j]")]),t._v("，"),a("code",[t._v("p[i]")]),t._v(" 的值再大不过超过 "),a("code",[t._v("mx - i")]),t._v(" ：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" mx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("min")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("2、当  "),a("code",[t._v("i >= mx")]),t._v("  的时候，此时也只能老老实实使用“中心扩散法”来逐渐得到 p 数组的值，同时记录 "),a("code",[t._v("id")]),t._v(" 和 "),a("code",[t._v("mx")]),t._v("。")]),t._v(" "),a("p",[t._v("以上可以合并成一行代码：")]),t._v(" "),a("p",[a("code",[t._v("p[i] = mx > i ? min(p[2 * id - i], mx - i) : 1;")])]),t._v(" "),a("p",[t._v("这一行代码拆开来看就是：")]),t._v(" "),a("p",[t._v("如果 "),a("code",[t._v("mx > i")]),t._v(", 则 "),a("code",[t._v("p[i] = min(p[2 * id - i], mx - i)")]),t._v("，否则 "),a("code",[t._v("p[i] = 1")]),t._v("。")]),t._v(" "),a("p",[t._v("Java 代码：")]),t._v(" "),a("div",{staticClass:"language-Java [] extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 创建分隔符分割的字符串\n     *\n     * @param s      原始字符串\n     * @param divide 分隔字符\n     * @return 使用分隔字符处理以后得到的字符串\n     */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("generateSDivided")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" divide"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("divide"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IllegalArgumentException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"参数错误，您传递的分割字符，在输入字符串中存在！"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),t._v(" sBuilder "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        sBuilder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("divide"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            sBuilder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            sBuilder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("divide"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" sBuilder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("longestPalindrome")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" sDivided "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("generateSDivided")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" slen "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sDivided"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("slen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" mx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// id 是由 mx 决定的，所以不用初始化，只要声明就可以了")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" longestPalindrome "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" longestPalindromeStr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" slen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" mx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这一步是 Manacher 算法的关键所在，一定要结合图形来理解")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这一行代码是关键，可以把两种分类讨论的情况合并")]),t._v("\n                p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 走到这里，只可能是因为 i = mx")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" mx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IllegalArgumentException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"程序出错！"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 老老实实去匹配，看新的字符")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" slen "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" sDivided"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" sDivided"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 我们想象 mx 的定义，它是遍历过的 i 的 i + p[i] 的最大者")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 写到这里，我们发现，如果 mx 的值越大，")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 进入上面 i < mx 的判断的可能性就越大，这样就可以重复利用之前判断过的回文信息了")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" mx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                mx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" longestPalindrome"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                longestPalindrome "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                longestPalindromeStr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sDivided"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"#"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" longestPalindromeStr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("复杂度分析：")])]),t._v(" "),a("ul",[a("li",[t._v("时间复杂度："),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("O")]),a("mo",[t._v("(")]),a("mi",[t._v("N")]),a("mo",[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(N)")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")]),a("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v("，由于 Manacher 算法只有在遇到还未匹配的位置时才进行匹配，已经匹配过的位置不再匹配，所以对于对于字符串"),a("code",[t._v("S")]),t._v(" 的每一个位置，都只进行一次匹配，所以算法的总体复杂度为 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("O")]),a("mo",[t._v("(")]),a("mi",[t._v("N")]),a("mo",[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(N)")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")]),a("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v("。")]),t._v(" "),a("li",[t._v("空间复杂度："),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("O")]),a("mo",[t._v("(")]),a("mi",[t._v("N")]),a("mo",[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(N)")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")]),a("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v("。")])]),t._v(" "),a("Vssue",{attrs:{title:"longest-palindromic-substring"}})],1)},[],!1,null,null,null);s.default=e.exports}}]);